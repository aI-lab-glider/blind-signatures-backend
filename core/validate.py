from functools import reduce
import hashlib


class Ring:
    def __init__(self, keys_numbers, L=2048):
        self.public_exponent = 65537
        self.public_keys = keys_numbers
        self.l = L
        self.amount_of_keys = len(keys_numbers)
        self.q = 1 << (L - 1)
        self.p = None

    def verify(self, m, X):
        self.permutation(m)

        def _f(i):
            return self.g(X[i + 1], self.public_exponent, self.public_keys[i])

        y = list(map(_f, range(len(X) - 1)))

        def _g(x, i):
            return self.E(x ^ y[i])

        r = reduce(_g, range(self.amount_of_keys), X[0])
        return r == X[0]

    def E(self, x):
        message = '%s%s' % (x, self.p)
        return int(hashlib.sha1(message.encode(encoding='utf-8')).hexdigest(), 16)

    def permutation(self, m):
        self.p = int(hashlib.sha1(('%s' % m).encode(encoding='utf-8')).hexdigest(), 16)

    def g(self, random_value, public_exponent, publicKey):
        q, r = divmod(random_value, publicKey)
        if ((q + 1) * publicKey) <= ((1 << self.l) - 1):
            result = q * publicKey + pow(r, public_exponent, publicKey)
        else:
            result = random_value
        return result


public_keys = [
    146257484477384048941163188880756896973724519514314982392166991128806269852377912197573880069654374817988352753843600998469639021788819372376879045512695367006967436704266098261885446554375531604535297750443074748162444675458806912252245125316072211749403027380018889330211529779799789258985914172158497536769,
    101427618875115180697812847695212917070748945405594946191348310062902180091468512811700016020248228273178191738715120549909479701452285253011733442258389499616950694930939237017479917320114315743348092479524574674735082629766333767379293460849763816536392546020020688204126527912267390867650258086267646979967,
    112147700484355372449428776952025555949617878052609924216026500243550536911589677481470340160762627950936934480298976449853453950219044952385715501842755225741058003217238336182279046337562515413546134590197745571869266611383171624611361588035878320954209518398112870674309842295944486699779980851535678108877,
    129966120424476027957810559702942466505612574517209536500763945062998230561595411551292581965679250281544041755105370039949723505451583328814536754073800442781265780134504222594564965707553116644897375643599033425781750744341554310920239693694644832883908858194445144745225094319046397908710567665296328009849,
    130097970739717950380042681631626681784409506349347612196398927717268801209267894482772218154047016760295356274665475459571520147599163504503578766337623619678884103753136457434957122561996075769058381105200328941774030200249432232070215633613135661056974718137864914054282035610239568879790414498939613996853,
    152281306192292616849668950685032099477122946476250094146184156647863315781147427078147837169300144266691496756291181429655262460457417189432682981299887187279368984171616278940015895267972336197657908464019604181598688704272986992821717443065725363769188368387655664795193074006639059141237179016595559418997,
    112264597543168570811843905105052148975992778558963643589501227923831351296993885363297400067776029032370527391205153447490257166088313958217042775811466111039769617011029679898580846084463032719546803983240557471503125407739726739671519448846731679246964537918422917648513125758132852616721252941800521404983,
    150576180502850378669232039234974018507369949733866576045185283187130117573939554831526472160594600668814207397328975086055509184866107586462542565971596204840192125705439122789314919414637941065384406478506032055493786650042303170547271787882078765790800917449408025993222166558823821925236046715753991571437]

r = Ring(public_keys)

msg1 = 'hello'
s1 = [1452035871581570593120297440488182810286902502779, 12105343552867791038589431575254530077746297951758380809302134902046611450369671285070438331981493820436412379381279647068254546268634698025438896213777329314052486557491286492572699437565790773447897317124591049472338695766121946277589483095967164755519730892558996439668668065775740919064053139134534239113173972202724163879392145076299619634122224174104283215859289334636213701599570438792896484301490849688241064215066016967868595691473840030264990898406067985711020601336588850954798955317284611784999563414287422882056582376991416498552897529098875424347744397508131024591124387136249657061989539025433505276400, 10760811474331611734848502825978438673825732696440098630570315889108102365557767713530204986316583365717169135212834753299715346052446114283878402128816312681610276149065099157095420052925836777484511000772152423532752375948225781493581121804513842053914626174525158431010200757573704621551986147191542379293447143086165828930373139493711608622498611306692947530174979809340418842479050124496077665562540198135442426809793796072199041817780194595867598590872236198156517178145768336184312131669373089719559638229764865236392092552904914608328260327505925954051446214360158703260855614300751859765652698972663987361498, 14830060224145149232391382061223826795471203522966978000607053807108939836353104354273345905908137080897464441424094968624934476963832378371186981938984000010220572963549752968336305963962358191844198900809688954511165921798667885845685022361482532330380601761820372921678668674852156746953878450701253026608581491643490513549369048813605747219672737907805214373880441289869168736661931788470058234040231565173930304783881587993801257856155773376009479465105439021529297502078058066272254046690251182627155739563652253590998849238638635143913036161425464047191171338363507685048453619359084930817158772838492264676914, 15503721221869067158711116083032073295724347882333421213492279440895869703658393881294491797893235309528518014713574560757637147970857434945441992082092491507142693532455134763906873173832569585032139330981739719922326343679656491728337623703819948667506943440185613551178319069190412019094805042257118935915934135773531396918586655931924806087075791838954463998931674128371533276396950650525201698959830077909734077560980861267922521997587895917901293163524508642234722953986175952847922210262503836388079581181343732900391650777607931278706231391500908949889191151764357921097888258260255454111532947229025146486157, 11318253430763540650192183687008121510567801559966398320773054817058239734546546919242216678179276958092513098229088124490133134907245498910843002427164686089565066204353283351796986925566271418065814018978187036431142583561340748068393294484402919699134549580672710327175916177867600522657549601397860979185133204394028312618333392791514900309215927285800229065917172031830986385848690234333802196694518746791658163035364200672810125140169011870820314616959122699373420669246890218682914930633473442221428861774621394023372438710580811233133732687713001330022800477194668378350243197677312400759290205109485574722296, 8413895760291774631861224060115085996306895022329748639406933757184344580208630011910136985690513290057544947207199202865278763787679063697800585663522948831663780617459858810624870530647299416101990980275704461911108013455742053085399501574209961039235382303528681880732883135938167994028907624010945816677564429741613586161049336001727623414089922846623308986979844470594451427247474046984010531803249616721064779603507263581383375751814728316788233719884181984251975832977969788669627682757892907482146824331888962358901579889082618259272286367175316252896261935456996983465900113666175102491485162093767194179476, 11652290337409164081165591712182685998620012650217402080902967349729218199666090046901144446451300979713421932206791259804348335952404181302355047397841748577381655113933889233038794813581974169243321938462231336592163914012834755000281870724914401023108111729142242427338407671639736175382863394855573928270260298823233798310824525766089588354320312984456393082984314137338275609711705460645166123699365593910801790219187404909845007487770055751575605715834543353310018906780517704949179858840062399247624720997714169883413000956158364098107361887614267449875102509277114577959469926252187190688826091227489081753178, 12105343552867791038589431575254530077746297951758380809302134902046611450369671285070438331981493820436412379381279647068254546268634698025438896213777329314052486557491286492572699437565790773447897317124591049472338695766121946277589483095967164755519730892558996439668668065775740919064053139134534239113173972202724163879392145076299619634122224174104283215859289334636213701599570438792896484301490849688241064215066016967868595691473840030264990898406067985711020601336588850954798955317284611784999563414287422882056582376991416498552897529098875424347744397508131024591124387136249657061989539025433505276400]

assert r.verify(msg1, s1)
